GIT AMEND
https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend

The git commit --amend command is a convenient way to modify the most recent commit. It lets you combine staged changes with the previous commit instead of creating an entirely new commit. 

It can also be used to simply edit the previous commit message without changing its snapshot. But, amending does not just alter the most recent commit, it replaces it entirely, meaning the amended commit will be a new entity with its own ref. To Git, it will look like a brand new commit

// CHANGE THE MOST RECENT COMMIT MESSAGE

	git commit --amend

Let's say you just committed and you made a mistake in your commit log message. Running this command when there is nothing staged lets you edit the previous commit’s message without altering its snapshot. Premature commits happen all the time in the course of your everyday development. It’s easy to forget to stage a file or to format your commit message the wrong way. The --amend flag is a convenient way to fix these minor mistakes.

	git commit --amend -m "an updated commit message"


Adding the -m option allows you to pass in a new message from the command line without being prompted to open an editor.


// CHANGING COMMITED FILES
The following example demonstrates a common scenario in Git-based development. Let's say we've edited a few files that we would like to commit in a single snapshot, but then we forget to add one of the files the first time around. Fixing the error is simply a matter of staging the other file and committing with the --amend flag:
	
	# Edit hello.py and main.py
	git add hello.py
	git commit 
	# Realize you forgot to add the changes from main.py 
	git add main.py 
	git commit --amend --no-edit

The --no-edit flag will allow you to make the amendment to your commit without changing its commit message. The resulting commit will replace the incomplete one, and it will look like we committed the changes to hello.py and main.py in a single snapshot.


// DONT AMEND PUBLIC COMMITS
Amended commits are actually entirely new commits and the previous commit will no longer be on your current branch. THIS HAS THE SAME CONSEQUENCES AS RESETTING A PUBLIC SNAPSHOT. AVOID AMENDING A COMMIT THAT OTHER DEVELOPERS HAVE BASED THEIR WORK ON. THIS IS A CONFUSING SITUATION FOR DEVELOPERS TO BE IN AND IT’S COMPLICATED TO RECOVER FROM.


// SUMMARY
To review, git commit --amend lets you take the most recent commit and add new staged changes to it. You can add or remove changes from the Git staging area to apply with a --amend commit. If there are no changes staged, a --amend will still prompt you to modify the last commit message log. Be cautious when using --amend on commits shared with other team members. Amending a commit that is shared with another user will potentially require confusing and lengthy merge conflict resolutions.