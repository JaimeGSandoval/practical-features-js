GIT DIFF
https://www.atlassian.com/git/tutorials/saving-changes/git-diff

COMPARING CHANGES WITH GIT DIFF
Diffing is a function that takes two input data sets and outputs the changes between them. git diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. The git diff command is often used along with git status and git log to analyze the current state of a Git repo.

If we execute git diff at this point, there will be no output. This is expected behavior as there are no changes in the repo to diff. Once modified, we can view a diff and analyze the output. Now executing git diff will produce the following output:

	diff --git a/diff_test.txt b/diff_test.txt
	index 6b0c6cf..b37e70a 100644
	--- a/diff_test.txt
	+++ b/diff_test.txt
	@@ -1 +1 @@
	-this is a git diff test example
	+this is a diff example

Let us now examine a more detailed breakdown of the diff output.

	1. Comparison input
	diff --git a/diff_test.txt b/diff_test.txt

This line displays the input sources of the diff. We can see that a/diff_test.txt and b/diff_test.txt have been passed to the diff.

	2. Meta data
	index 6b0c6cf..b37e70a 100644

This line displays some internal Git metadata. You will most likely not need this information. The numbers in this output correspond to Git object version hash identifiers.

	3. Markers for changes
	--- a/diff_test.txt
	+++ b/diff_test.txt

These lines are a legend that assigns symbols to each diff input source. In this case, changes from a/diff_test.txt are marked with a --- and the changes from b/diff_test.txt are marked with the +++ symbol.

	4. Diff chunks
	The remaining diff output is a list of diff 'chunks'. A diff only displays the sections of the file that have changes. 	In our current example, we only have one chunk as we are working with a simple scenario. Chunks have their own granular 	output semantics.

	@@ -1 +1 @@
	-this is a git diff test example
	+this is a diff example

The first line is the chunk header. Each chunk is prepended by a header inclosed within @@ symbols. The content of the header is a summary of changes made to the file. In our simplified example, we have -1 +1 meaning line one had changes. In a more realistic diff, you would see a header like:

	@@ -34,6 +34,8 @@

In this header example, 6 lines have been extracted starting from line number 34. Additionally, 8 lines have been added starting at line number 34. 


// COMPARING FILES
The git diff command can be passed an explicit file path option. When a file path is passed to git diff the diff operation will be scoped to the specified file. The below examples demonstrate this usage.

	git diff HEAD ./path/to/file

This example is scoped to ./path/to/file when invoked, it will compare the specific changes in the working directory, against the index, showing the changes that are not staged yet. By default git diff will execute the comparison against HEAD. Omitting HEAD in the example above git diff ./path/to/file has the same effect.

	git diff --cached ./path/to/file

When git diff is invoked with the --cached option the diff will compare the staged changes with the local repository. The --cached option is synonymous with --staged.


// COMPARING ALL CHANGES
Invoking git diff without a file path will compare changes across the entire repository. The above, file specific examples, can be invoked without the ./path/to/file argument and have the same output results across all files in the local repo.


// CHANGES SINCE LAST COMMIT
By default git diff will show you any uncommitted changes since the last commit.
The remaining content of the diff chunk displays the recent changes. Each changed line is prepended with a + or - symbol indicating which version of the diff input the changes come from. As we previously discussed, - indicates changes from the a/diff_test.txt and + indicates changes from b/diff_test.txt


// COMPARING FILES BETWEEN TWO DIFFERENT COMMITS
git diff can be passed Git refs to commits to diff. Some example refs are, HEAD, tags, and branch names. Every commit in Git has a commit ID which you can get when you execute GIT LOG. You can also pass this commit ID to git diff.
	


// COMPARING BRANCHES
	
	Comparing two branches:
	   Branches are compared like all other ref inputs to git diff

           git diff branch1..other-feature-branch

	This example introduces the dot operator. The two dots in this example indicate the diff input is the tips of both 	branches. The same effect happens if the dots are omitted and a space is used between the branches. Additionally, there 	is a three dot operator:

	git diff branch1...other-feature-branch

	The three dot operator initiates the diff by changing the first input parameter branch1. It changes branch1 into a ref 	of the shared common ancestor commit between the two diff inputs, the shared ancestor of branch1 and other-feature-	branch. The last parameter input parameter remains unchanged as the tip of other-feature-branch.


// Comparing files from two branchesCOMPARING FILES FROM FROM TWO BRANCHES	
To compare a specific file across branches, pass in the path of the file as the third argument to git diff

	git diff main new_branch ./diff_test.txt


